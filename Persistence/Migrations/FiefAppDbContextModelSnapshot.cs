// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(FiefAppDbContext))]
    partial class FiefAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Assignment", b =>
                {
                    b.Property<Guid>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssignmentId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Domain.Entities.Boat", b =>
                {
                    b.Property<Guid>("BoatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BoatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BackIn")
                        .HasColumnType("int");

                    b.Property<int>("BoatTypeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("BoatbuilderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuildTimeInDays")
                        .HasColumnType("int");

                    b.Property<int>("BuildTimeInDaysAll")
                        .HasColumnType("int");

                    b.Property<Guid?>("CargoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CostWhenFinishedSilver")
                        .HasColumnType("int");

                    b.Property<int>("CrewNeeded")
                        .HasColumnType("int");

                    b.Property<decimal>("Depth")
                        .HasColumnType("decimal(15,5)");

                    b.Property<Guid?>("FiefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Mariners")
                        .HasColumnType("int");

                    b.Property<int>("MaxCargo")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Navigators")
                        .HasColumnType("int");

                    b.Property<int>("NextFinishedDays")
                        .HasColumnType("int");

                    b.Property<int>("Officers")
                        .HasColumnType("int");

                    b.Property<Guid?>("PortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rowers")
                        .HasColumnType("int");

                    b.Property<int>("RowersNeeded")
                        .HasColumnType("int");

                    b.Property<int>("Sailors")
                        .HasColumnType("int");

                    b.Property<int>("Seamens")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShipyardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(15,5)");

                    b.HasKey("BoatId");

                    b.HasIndex("BoatTypeId");

                    b.HasIndex("BoatbuilderId");

                    b.HasIndex("CargoId");

                    b.HasIndex("FiefId");

                    b.HasIndex("PortId");

                    b.HasIndex("ShipyardId");

                    b.ToTable("Boats");
                });

            modelBuilder.Entity("Domain.Entities.Building", b =>
                {
                    b.Property<Guid>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("BuilderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BuildingTypeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("FiefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IronThisYear")
                        .HasColumnType("int");

                    b.Property<int>("SmithsworkThisYear")
                        .HasColumnType("int");

                    b.Property<int>("StoneThisYear")
                        .HasColumnType("int");

                    b.Property<int>("StoneworkThisYear")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WoodThisYear")
                        .HasColumnType("int");

                    b.Property<int>("WoodworkThisYear")
                        .HasColumnType("int");

                    b.HasKey("BuildingId");

                    b.HasIndex("BuilderId");

                    b.HasIndex("BuildingTypeId");

                    b.HasIndex("FiefId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Domain.Entities.Cargo", b =>
                {
                    b.Property<Guid>("CargoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Base")
                        .HasColumnType("int");

                    b.Property<int>("Iron")
                        .HasColumnType("int");

                    b.Property<int>("Luxury")
                        .HasColumnType("int");

                    b.Property<int>("Other")
                        .HasColumnType("int");

                    b.Property<string>("OtherInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Silver")
                        .HasColumnType("int");

                    b.Property<int>("Stone")
                        .HasColumnType("int");

                    b.Property<int>("Wood")
                        .HasColumnType("int");

                    b.HasKey("CargoId");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("Domain.Entities.Development", b =>
                {
                    b.Property<Guid>("DevelopmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DevelopmentId");

                    b.HasIndex("AssignmentId")
                        .IsUnique()
                        .HasFilter("[AssignmentId] IS NOT NULL");

                    b.ToTable("Developments");
                });

            modelBuilder.Entity("Domain.Entities.Fief", b =>
                {
                    b.Property<Guid>("FiefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FiefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Acres")
                        .HasColumnType("int");

                    b.Property<int>("AgriculturalDevelopmentLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("AgriculturalQuality")
                        .HasColumnType("int");

                    b.Property<int>("AnimalHusbandryDevelopmentLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("AnimalHusbandryQuality")
                        .HasColumnType("int");

                    b.Property<Guid?>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EducationDevelopmentLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("FarmlandAcres")
                        .HasColumnType("int");

                    b.Property<int>("FishingDevelopmentLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("FishingQuality")
                        .HasColumnType("int");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HealthcareDevelopmentLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid>("InheritanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("InheritanceTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("LivingconditionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MilitaryDevelopmentLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<int>("OreDevelopmentLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("OreQuality")
                        .HasColumnType("int");

                    b.Property<int>("PastureAcres")
                        .HasColumnType("int");

                    b.Property<Guid?>("PortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SeafaringDevelopmentLevel")
                        .HasColumnType("int");

                    b.Property<int>("UnusableAcres")
                        .HasColumnType("int");

                    b.Property<int>("WoodlandAcres")
                        .HasColumnType("int");

                    b.Property<int>("WoodlandDevelopmentLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("FiefId");

                    b.HasIndex("AssignmentId")
                        .IsUnique()
                        .HasFilter("[AssignmentId] IS NOT NULL");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("InheritanceId")
                        .IsUnique();

                    b.HasIndex("InheritanceTypeId");

                    b.HasIndex("LivingconditionId")
                        .IsUnique();

                    b.HasIndex("MarketId")
                        .IsUnique();

                    b.HasIndex("PortId")
                        .IsUnique()
                        .HasFilter("[PortId] IS NOT NULL");

                    b.HasIndex("RoadId")
                        .IsUnique();

                    b.ToTable("Fiefs");
                });

            modelBuilder.Entity("Domain.Entities.GameSession", b =>
                {
                    b.Property<Guid>("GameSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserLinkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameSessionId");

                    b.HasIndex("UserLinkId");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("Domain.Entities.Industries.Industry", b =>
                {
                    b.Property<Guid>("IndustryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FiefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IndustryId");

                    b.HasIndex("AssignmentId")
                        .IsUnique()
                        .HasFilter("[AssignmentId] IS NOT NULL");

                    b.HasIndex("FiefId");

                    b.ToTable("Industries");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Industry");
                });

            modelBuilder.Entity("Domain.Entities.Inheritance", b =>
                {
                    b.Property<Guid>("InheritanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InheritanceTypeId")
                        .HasColumnType("int");

                    b.HasKey("InheritanceId");

                    b.HasIndex("InheritanceTypeId");

                    b.ToTable("Inheritances");
                });

            modelBuilder.Entity("Domain.Entities.Livingcondition", b =>
                {
                    b.Property<Guid>("LivingconditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LivingconditionTypeId")
                        .HasColumnType("int");

                    b.HasKey("LivingconditionId");

                    b.HasIndex("LivingconditionTypeId");

                    b.ToTable("Livingconditions");
                });

            modelBuilder.Entity("Domain.Entities.Market", b =>
                {
                    b.Property<Guid>("MarketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Bailiffs")
                        .HasColumnType("int");

                    b.Property<int>("Crime")
                        .HasColumnType("int");

                    b.Property<int>("DevelopmentLevel")
                        .HasColumnType("int");

                    b.Property<int>("IncomeBase")
                        .HasColumnType("int");

                    b.Property<int>("IncomeSilver")
                        .HasColumnType("int");

                    b.Property<bool>("IsBeingDeveloped")
                        .HasColumnType("bit");

                    b.Property<int>("Merchandise")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Taxes")
                        .HasColumnType("int");

                    b.HasKey("MarketId");

                    b.HasIndex("AssignmentId")
                        .IsUnique()
                        .HasFilter("[AssignmentId] IS NOT NULL");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("Domain.Entities.Persons.Boatbuilder", b =>
                {
                    b.Property<Guid>("BoatbuilderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<Guid?>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Loyalty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Resources")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShipyardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.HasKey("BoatbuilderId");

                    b.HasIndex("ShipyardId");

                    b.ToTable("Boatbuilders");
                });

            modelBuilder.Entity("Domain.Entities.Persons.Builder", b =>
                {
                    b.Property<Guid>("BuilderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<Guid?>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FiefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Loyalty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Resources")
                        .HasColumnType("int");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.HasKey("BuilderId");

                    b.HasIndex("FiefId");

                    b.ToTable("Builders");
                });

            modelBuilder.Entity("Domain.Entities.Persons.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeTypeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("FiefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Loyalty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Resources")
                        .HasColumnType("int");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("FiefId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Domain.Entities.Persons.Merchant", b =>
                {
                    b.Property<Guid>("MerchantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<Guid?>("CargoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Loyalty")
                        .HasColumnType("int");

                    b.Property<Guid?>("MarketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Resources")
                        .HasColumnType("int");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MerchantId");

                    b.HasIndex("CargoId");

                    b.HasIndex("MarketId");

                    b.HasIndex("PortId");

                    b.ToTable("Merchants");
                });

            modelBuilder.Entity("Domain.Entities.Persons.Resident", b =>
                {
                    b.Property<Guid>("ResidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<Guid?>("FiefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Loyalty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Resources")
                        .HasColumnType("int");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.HasKey("ResidentId");

                    b.HasIndex("FiefId");

                    b.ToTable("Residents");
                });

            modelBuilder.Entity("Domain.Entities.Persons.Soldier", b =>
                {
                    b.Property<Guid>("SoldierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("BoatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FiefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsResident")
                        .HasColumnType("bit");

                    b.Property<int>("Loyalty")
                        .HasColumnType("int");

                    b.Property<Guid?>("MarketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MerchantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MineIndustryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuarryIndustryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Resources")
                        .HasColumnType("int");

                    b.Property<Guid?>("RoadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.Property<int>("SoldierTypeId")
                        .HasColumnType("int");

                    b.HasKey("SoldierId");

                    b.HasIndex("BoatId");

                    b.HasIndex("FiefId");

                    b.HasIndex("MarketId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("MineIndustryId");

                    b.HasIndex("PortId");

                    b.HasIndex("QuarryIndustryId");

                    b.HasIndex("RoadId");

                    b.HasIndex("SoldierTypeId");

                    b.ToTable("Soldiers");
                });

            modelBuilder.Entity("Domain.Entities.Persons.Steward", b =>
                {
                    b.Property<Guid>("StewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<Guid>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FiefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GameSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Loyalty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Resources")
                        .HasColumnType("int");

                    b.Property<int>("Skill")
                        .HasColumnType("int");

                    b.HasKey("StewardId");

                    b.HasIndex("AssignmentId")
                        .IsUnique();

                    b.HasIndex("FiefId");

                    b.HasIndex("GameSessionId");

                    b.ToTable("Stewards");
                });

            modelBuilder.Entity("Domain.Entities.Port", b =>
                {
                    b.Property<Guid>("PortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Bailiffs")
                        .HasColumnType("int");

                    b.Property<int>("Crime")
                        .HasColumnType("int");

                    b.Property<int>("DevelopmentLevel")
                        .HasColumnType("int");

                    b.Property<int>("IncomeSilver")
                        .HasColumnType("int");

                    b.Property<bool>("IsBeingDeveloped")
                        .HasColumnType("bit");

                    b.Property<int>("Merchandise")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShipyardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Taxes")
                        .HasColumnType("int");

                    b.HasKey("PortId");

                    b.HasIndex("AssignmentId")
                        .IsUnique()
                        .HasFilter("[AssignmentId] IS NOT NULL");

                    b.HasIndex("ShipyardId")
                        .IsUnique()
                        .HasFilter("[ShipyardId] IS NOT NULL");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("Domain.Entities.Road", b =>
                {
                    b.Property<Guid>("RoadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoadTypeId")
                        .HasColumnType("int");

                    b.HasKey("RoadId");

                    b.HasIndex("RoadTypeId");

                    b.ToTable("Roads");
                });

            modelBuilder.Entity("Domain.Entities.Shipyard", b =>
                {
                    b.Property<Guid>("ShipyardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DevelopmentLevel")
                        .HasColumnType("int");

                    b.Property<int>("IncomeSilver")
                        .HasColumnType("int");

                    b.Property<bool>("IsBeingDeveloped")
                        .HasColumnType("bit");

                    b.Property<int>("LargeDocks")
                        .HasColumnType("int");

                    b.Property<int>("MediumDocks")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PopulationModifier")
                        .HasColumnType("int");

                    b.Property<int>("SmallDocks")
                        .HasColumnType("int");

                    b.HasKey("ShipyardId");

                    b.HasIndex("AssignmentId")
                        .IsUnique()
                        .HasFilter("[AssignmentId] IS NOT NULL");

                    b.ToTable("Shipyards");
                });

            modelBuilder.Entity("Domain.Entities.Types.BoatType", b =>
                {
                    b.Property<int>("BoatTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BoatTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BL")
                        .HasColumnType("decimal(15,5)");

                    b.Property<int>("BenchMod")
                        .HasColumnType("int");

                    b.Property<decimal>("BenchMulti")
                        .HasColumnType("decimal(15,5)");

                    b.Property<decimal>("Cargo")
                        .HasColumnType("decimal(15,5)");

                    b.Property<decimal>("Crew")
                        .HasColumnType("decimal(15,5)");

                    b.Property<decimal>("DB")
                        .HasColumnType("decimal(15,5)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LengthMax")
                        .HasColumnType("int");

                    b.Property<int>("LengthMin")
                        .HasColumnType("int");

                    b.Property<int>("Masts")
                        .HasColumnType("int");

                    b.Property<int>("OarsMulti")
                        .HasColumnType("int");

                    b.Property<int>("RowerMulti")
                        .HasColumnType("int");

                    b.Property<string>("Seaworthiness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BoatTypeId");

                    b.ToTable("BoatTypes");

                    b.HasData(
                        new
                        {
                            BoatTypeId = 1,
                            BL = 0.3m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 1.5m,
                            Crew = 0.35m,
                            DB = 0.28m,
                            ImgSource = "1.jpg",
                            LengthMax = 28,
                            LengthMin = 20,
                            Masts = 3,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "1T6",
                            Type = "Bridad"
                        },
                        new
                        {
                            BoatTypeId = 2,
                            BL = 0.25m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 0.5m,
                            Crew = 0.5m,
                            DB = 0.28m,
                            ImgSource = "2.jpg",
                            LengthMax = 28,
                            LengthMin = 23,
                            Masts = 2,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "2T6",
                            Type = "Drakfartyg"
                        },
                        new
                        {
                            BoatTypeId = 3,
                            BL = 0.38m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 0.9m,
                            Crew = 0.3m,
                            DB = 0.35m,
                            ImgSource = "3.jpg",
                            LengthMax = 6,
                            LengthMin = 6,
                            Masts = 1,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "1T6",
                            Type = "Fiskebåt"
                        },
                        new
                        {
                            BoatTypeId = 4,
                            BL = 0.44m,
                            BenchMod = 3,
                            BenchMulti = 0.5m,
                            Cargo = 1.8m,
                            Crew = 0.4m,
                            DB = 0.15m,
                            ImgSource = "4.jpg",
                            LengthMax = 7,
                            LengthMin = 5,
                            Masts = 2,
                            OarsMulti = 2,
                            RowerMulti = -1,
                            Seaworthiness = "4T6",
                            Type = "Flodbåt"
                        },
                        new
                        {
                            BoatTypeId = 5,
                            BL = 0.42m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 2m,
                            Crew = 0.2m,
                            DB = 0.12m,
                            ImgSource = "5.jpg",
                            LengthMax = 27,
                            LengthMin = 17,
                            Masts = 2,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "4T6",
                            Type = "Flodpråm"
                        },
                        new
                        {
                            BoatTypeId = 6,
                            BL = 0.28m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 1m,
                            Crew = 0.25m,
                            DB = 0.35m,
                            ImgSource = "6.jpg",
                            LengthMax = 19,
                            LengthMin = 13,
                            Masts = 2,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "1T6",
                            Type = "Gaffa"
                        },
                        new
                        {
                            BoatTypeId = 7,
                            BL = 0.24m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 1.6m,
                            Crew = 0.35m,
                            DB = 0.33m,
                            ImgSource = "7.jpg",
                            LengthMax = 35,
                            LengthMin = 22,
                            Masts = 3,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "2T6",
                            Type = "Galloz"
                        },
                        new
                        {
                            BoatTypeId = 8,
                            BL = 0.27m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 1.4m,
                            Crew = 0.4m,
                            DB = 0.28m,
                            ImgSource = "8.jpg",
                            LengthMax = 11,
                            LengthMin = 7,
                            Masts = 1,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "1T6",
                            Type = "Jagol"
                        },
                        new
                        {
                            BoatTypeId = 9,
                            BL = 0.18m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 1m,
                            Crew = 0.4m,
                            DB = 0.4m,
                            ImgSource = "9.jpg",
                            LengthMax = 17,
                            LengthMin = 12,
                            Masts = 2,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "3T6",
                            Type = "Jakt"
                        },
                        new
                        {
                            BoatTypeId = 10,
                            BL = 0.21m,
                            BenchMod = -10,
                            BenchMulti = 0.5m,
                            Cargo = 1m,
                            Crew = 0.35m,
                            DB = 0.35m,
                            ImgSource = "10.jpg",
                            LengthMax = 23,
                            LengthMin = 19,
                            Masts = 1,
                            OarsMulti = 4,
                            RowerMulti = 4,
                            Seaworthiness = "2T6",
                            Type = "Kaga"
                        },
                        new
                        {
                            BoatTypeId = 11,
                            BL = 0.27m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 1.7m,
                            Crew = 0.25m,
                            DB = 0.4m,
                            ImgSource = "11.jpg",
                            LengthMax = 22,
                            LengthMin = 14,
                            Masts = 1,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "3T6",
                            Type = "Kagge"
                        },
                        new
                        {
                            BoatTypeId = 12,
                            BL = 0.28m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 1.4m,
                            Crew = 0.3m,
                            DB = 0.36m,
                            ImgSource = "12.jpg",
                            LengthMax = 37,
                            LengthMin = 26,
                            Masts = 4,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "1T6",
                            Type = "Karack, fyrmastad"
                        },
                        new
                        {
                            BoatTypeId = 13,
                            BL = 0.26m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 1.3m,
                            Crew = 0.33m,
                            DB = 0.38m,
                            ImgSource = "13.jpg",
                            LengthMax = 29,
                            LengthMin = 17,
                            Masts = 3,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "2T6",
                            Type = "Karack, tremastad"
                        },
                        new
                        {
                            BoatTypeId = 14,
                            BL = 0.32m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 1.4m,
                            Crew = 0.35m,
                            DB = 0.2m,
                            ImgSource = "14.jpg",
                            LengthMax = 24,
                            LengthMin = 13,
                            Masts = 2,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "3T6",
                            Type = "Lanacka"
                        },
                        new
                        {
                            BoatTypeId = 15,
                            BL = 0.2m,
                            BenchMod = -14,
                            BenchMulti = 1.5m,
                            Cargo = 0.7m,
                            Crew = 0.2m,
                            DB = 0.32m,
                            ImgSource = "15.jpg",
                            LengthMax = 34,
                            LengthMin = 24,
                            Masts = 1,
                            OarsMulti = 2,
                            RowerMulti = 4,
                            Seaworthiness = "3T6",
                            Type = "Lemirier"
                        },
                        new
                        {
                            BoatTypeId = 16,
                            BL = 0.3m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 1.5m,
                            Crew = 0.36m,
                            DB = 0.28m,
                            ImgSource = "16.jpg",
                            LengthMax = 25,
                            LengthMin = 12,
                            Masts = 1,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "2T6",
                            Type = "Rundskepp, ett däck"
                        },
                        new
                        {
                            BoatTypeId = 17,
                            BL = 0.25m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 1.6m,
                            Crew = 0.38m,
                            DB = 0.32m,
                            ImgSource = "17.jpg",
                            LengthMax = 36,
                            LengthMin = 25,
                            Masts = 2,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "2T6",
                            Type = "Rundskepp, två däck"
                        },
                        new
                        {
                            BoatTypeId = 18,
                            BL = 0.22m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 1.6m,
                            Crew = 0.4m,
                            DB = 0.35m,
                            ImgSource = "18.jpg",
                            LengthMax = 33,
                            LengthMin = 23,
                            Masts = 3,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "2T6",
                            Type = "Sabrier, tremastad"
                        },
                        new
                        {
                            BoatTypeId = 19,
                            BL = 0.2m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 1.5m,
                            Crew = 0.4m,
                            DB = 0.4m,
                            ImgSource = "19.jpg",
                            LengthMax = 25,
                            LengthMin = 17,
                            Masts = 2,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "2T6",
                            Type = "Sabrier, tvåmastad"
                        },
                        new
                        {
                            BoatTypeId = 20,
                            BL = 0.35m,
                            BenchMod = -5,
                            BenchMulti = 0.4m,
                            Cargo = 1.2m,
                            Crew = 0.35m,
                            DB = 0.24m,
                            ImgSource = "20.jpg",
                            LengthMax = 14,
                            LengthMin = 8,
                            Masts = 1,
                            OarsMulti = 2,
                            RowerMulti = -1,
                            Seaworthiness = "3T6",
                            Type = "Slurp"
                        },
                        new
                        {
                            BoatTypeId = 21,
                            BL = 0.18m,
                            BenchMod = -17,
                            BenchMulti = 1.8m,
                            Cargo = 1m,
                            Crew = 0.2m,
                            DB = 0.3m,
                            ImgSource = "21.jpg",
                            LengthMax = 37,
                            LengthMin = 27,
                            Masts = 1,
                            OarsMulti = 4,
                            RowerMulti = 4,
                            Seaworthiness = "3T6",
                            Type = "Umbura"
                        },
                        new
                        {
                            BoatTypeId = 22,
                            BL = 0.25m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 1.5m,
                            Crew = 0.28m,
                            DB = 0.35m,
                            ImgSource = "22.jpg",
                            LengthMax = 21,
                            LengthMin = 14,
                            Masts = 3,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "2T6",
                            Type = "Vågridare, tremastad"
                        },
                        new
                        {
                            BoatTypeId = 23,
                            BL = 0.24m,
                            BenchMod = 0,
                            BenchMulti = 0m,
                            Cargo = 1.4m,
                            Crew = 0.35m,
                            DB = 0.32m,
                            ImgSource = "23.jpg",
                            LengthMax = 16,
                            LengthMin = 11,
                            Masts = 2,
                            OarsMulti = 0,
                            RowerMulti = 0,
                            Seaworthiness = "3T6",
                            Type = "Vågridare, tvåmastad"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Types.BuildingType", b =>
                {
                    b.Property<int>("BuildingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("BuildingTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Iron")
                        .HasColumnType("int");

                    b.Property<int>("Smithswork")
                        .HasColumnType("int");

                    b.Property<int>("Stone")
                        .HasColumnType("int");

                    b.Property<int>("Stonework")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Upkeep")
                        .HasColumnType("float");

                    b.Property<int>("Wood")
                        .HasColumnType("int");

                    b.Property<int>("Woodwork")
                        .HasColumnType("int");

                    b.HasKey("BuildingTypeId");

                    b.ToTable("BuildingTypes");

                    b.HasData(
                        new
                        {
                            BuildingTypeId = 1,
                            Iron = 0,
                            Smithswork = 0,
                            Stone = 14,
                            Stonework = 280,
                            Type = "Bageri",
                            Upkeep = 3.0,
                            Wood = 60,
                            Woodwork = 920
                        },
                        new
                        {
                            BuildingTypeId = 2,
                            Iron = 8,
                            Smithswork = 8,
                            Stone = 27,
                            Stonework = 540,
                            Type = "Kvarn",
                            Upkeep = 4.0,
                            Wood = 100,
                            Woodwork = 1533
                        },
                        new
                        {
                            BuildingTypeId = 3,
                            Iron = 0,
                            Smithswork = 0,
                            Stone = 0,
                            Stonework = 40,
                            Type = "Vall",
                            Upkeep = 0.10000000000000001,
                            Wood = 0,
                            Woodwork = 0
                        },
                        new
                        {
                            BuildingTypeId = 4,
                            Iron = 0,
                            Smithswork = 0,
                            Stone = 0,
                            Stonework = 60,
                            Type = "Vall och grav",
                            Upkeep = 0.20000000000000001,
                            Wood = 0,
                            Woodwork = 0
                        },
                        new
                        {
                            BuildingTypeId = 5,
                            Iron = 0,
                            Smithswork = 0,
                            Stone = 0,
                            Stonework = 0,
                            Type = "Palissad",
                            Upkeep = 0.10000000000000001,
                            Wood = 5,
                            Woodwork = 20
                        },
                        new
                        {
                            BuildingTypeId = 6,
                            Iron = 0,
                            Smithswork = 0,
                            Stone = 0,
                            Stonework = 0,
                            Type = "Dubbel palissad",
                            Upkeep = 0.20000000000000001,
                            Wood = 15,
                            Woodwork = 60
                        },
                        new
                        {
                            BuildingTypeId = 7,
                            Iron = 0,
                            Smithswork = 0,
                            Stone = 53,
                            Stonework = 1100,
                            Type = "Mur",
                            Upkeep = 0.40000000000000002,
                            Wood = 0,
                            Woodwork = 53
                        },
                        new
                        {
                            BuildingTypeId = 8,
                            Iron = 0,
                            Smithswork = 0,
                            Stone = 150,
                            Stonework = 3000,
                            Type = "Dubbel mur",
                            Upkeep = 0.59999999999999998,
                            Wood = 100,
                            Woodwork = 150
                        },
                        new
                        {
                            BuildingTypeId = 9,
                            Iron = 0,
                            Smithswork = 0,
                            Stone = 750,
                            Stonework = 5000,
                            Type = "Tjock mur",
                            Upkeep = 0.80000000000000004,
                            Wood = 0,
                            Woodwork = 750
                        },
                        new
                        {
                            BuildingTypeId = 10,
                            Iron = 0,
                            Smithswork = 0,
                            Stone = 4000,
                            Stonework = 35000,
                            Type = "Massiv mur",
                            Upkeep = 1.0,
                            Wood = 0,
                            Woodwork = 4000
                        },
                        new
                        {
                            BuildingTypeId = 11,
                            Iron = 0,
                            Smithswork = 0,
                            Stone = 58,
                            Stonework = 1200,
                            Type = "Mur med stävpelare",
                            Upkeep = 0.45000000000000001,
                            Wood = 0,
                            Woodwork = 58
                        },
                        new
                        {
                            BuildingTypeId = 12,
                            Iron = 12,
                            Smithswork = 12,
                            Stone = 68,
                            Stonework = 1400,
                            Type = "Litet porttorn",
                            Upkeep = 1.0,
                            Wood = 6,
                            Woodwork = 92
                        },
                        new
                        {
                            BuildingTypeId = 13,
                            Iron = 24,
                            Smithswork = 24,
                            Stone = 220,
                            Stonework = 4400,
                            Type = "Porttorn",
                            Upkeep = 2.0,
                            Wood = 12,
                            Woodwork = 270
                        },
                        new
                        {
                            BuildingTypeId = 14,
                            Iron = 24,
                            Smithswork = 42,
                            Stone = 220,
                            Stonework = 28000,
                            Type = "Stort porttorn",
                            Upkeep = 4.0,
                            Wood = 21,
                            Woodwork = 1500
                        },
                        new
                        {
                            BuildingTypeId = 15,
                            Iron = 44,
                            Smithswork = 44,
                            Stone = 0,
                            Stonework = 0,
                            Type = "Trätorn",
                            Upkeep = 1.0,
                            Wood = 22,
                            Woodwork = 88
                        },
                        new
                        {
                            BuildingTypeId = 16,
                            Iron = 12,
                            Smithswork = 12,
                            Stone = 87,
                            Stonework = 1700,
                            Type = "Litet stentorn, fyrkantigt",
                            Upkeep = 1.0,
                            Wood = 6,
                            Woodwork = 110
                        },
                        new
                        {
                            BuildingTypeId = 17,
                            Iron = 52,
                            Smithswork = 52,
                            Stone = 270,
                            Stonework = 5400,
                            Type = "Stentorn, fyrkantigt",
                            Upkeep = 2.0,
                            Wood = 26,
                            Woodwork = 370
                        },
                        new
                        {
                            BuildingTypeId = 18,
                            Iron = 80,
                            Smithswork = 80,
                            Stone = 1500,
                            Stonework = 30000,
                            Type = "Stort stentorn, fyrkantigt",
                            Upkeep = 4.0,
                            Wood = 40,
                            Woodwork = 1600
                        },
                        new
                        {
                            BuildingTypeId = 19,
                            Iron = 8,
                            Smithswork = 8,
                            Stone = 63,
                            Stonework = 1300,
                            Type = "Litet stentorn, runt",
                            Upkeep = 1.0,
                            Wood = 4,
                            Woodwork = 88
                        },
                        new
                        {
                            BuildingTypeId = 20,
                            Iron = 42,
                            Smithswork = 42,
                            Stone = 210,
                            Stonework = 4200,
                            Type = "Stentorn, runt",
                            Upkeep = 2.0,
                            Wood = 21,
                            Woodwork = 290
                        },
                        new
                        {
                            BuildingTypeId = 21,
                            Iron = 60,
                            Smithswork = 60,
                            Stone = 1175,
                            Stonework = 23500,
                            Type = "Stort stentorn, runt",
                            Upkeep = 4.0,
                            Wood = 31,
                            Woodwork = 1250
                        },
                        new
                        {
                            BuildingTypeId = 22,
                            Iron = 160,
                            Smithswork = 160,
                            Stone = 2200,
                            Stonework = 44000,
                            Type = "Borgkärna, fyrkantig",
                            Upkeep = 8.0,
                            Wood = 74,
                            Woodwork = 2500
                        },
                        new
                        {
                            BuildingTypeId = 23,
                            Iron = 280,
                            Smithswork = 280,
                            Stone = 3400,
                            Stonework = 68000,
                            Type = "Stor borgkärna, fyrkantig",
                            Upkeep = 16.0,
                            Wood = 140,
                            Woodwork = 4000
                        },
                        new
                        {
                            BuildingTypeId = 24,
                            Iron = 120,
                            Smithswork = 120,
                            Stone = 1700,
                            Stonework = 34000,
                            Type = "Borgkärna, rund",
                            Upkeep = 8.0,
                            Wood = 58,
                            Woodwork = 1900
                        },
                        new
                        {
                            BuildingTypeId = 25,
                            Iron = 340,
                            Smithswork = 340,
                            Stone = 5100,
                            Stonework = 102000,
                            Type = "Sammansatt borgkärna",
                            Upkeep = 16.0,
                            Wood = 170,
                            Woodwork = 5700
                        },
                        new
                        {
                            BuildingTypeId = 26,
                            Iron = 0,
                            Smithswork = 0,
                            Stone = 0,
                            Stonework = 0,
                            Type = "Trähus",
                            Upkeep = 0.025000000000000001,
                            Wood = 6,
                            Woodwork = 24
                        },
                        new
                        {
                            BuildingTypeId = 27,
                            Iron = 8,
                            Smithswork = 8,
                            Stone = 22,
                            Stonework = 440,
                            Type = "Stenhus",
                            Upkeep = 0.025000000000000001,
                            Wood = 4,
                            Woodwork = 16
                        },
                        new
                        {
                            BuildingTypeId = 28,
                            Iron = 8,
                            Smithswork = 8,
                            Stone = 27,
                            Stonework = 0,
                            Type = "Tvåvånings trähus",
                            Upkeep = 0.050000000000000003,
                            Wood = 12,
                            Woodwork = 48
                        },
                        new
                        {
                            BuildingTypeId = 29,
                            Iron = 8,
                            Smithswork = 8,
                            Stone = 44,
                            Stonework = 880,
                            Type = "Tvåvånings stenhus",
                            Upkeep = 0.050000000000000003,
                            Wood = 4,
                            Woodwork = 60
                        },
                        new
                        {
                            BuildingTypeId = 30,
                            Iron = 130,
                            Smithswork = 130,
                            Stone = 1200,
                            Stonework = 47000,
                            Type = "Tempel/Kyrka",
                            Upkeep = 0.0,
                            Wood = 66,
                            Woodwork = 1700
                        },
                        new
                        {
                            BuildingTypeId = 31,
                            Iron = 400,
                            Smithswork = 400,
                            Stone = 3500,
                            Stonework = 140000,
                            Type = "Stort tempel/kyrka",
                            Upkeep = 0.0,
                            Wood = 200,
                            Woodwork = 5100
                        },
                        new
                        {
                            BuildingTypeId = 32,
                            Iron = 2000,
                            Smithswork = 2000,
                            Stone = 18000,
                            Stonework = 700000,
                            Type = "Katedral",
                            Upkeep = 0.0,
                            Wood = 1000,
                            Woodwork = 26000
                        });
                });

            modelBuilder.Entity("Domain.Entities.Types.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EmployeeTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseCost")
                        .HasColumnType("int");

                    b.Property<int>("LuxuryCost")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeTypeId");

                    b.ToTable("EmployeeTypes");

                    b.HasData(
                        new
                        {
                            EmployeeTypeId = 1,
                            BaseCost = 2,
                            LuxuryCost = 1,
                            Type = "Falconer"
                        },
                        new
                        {
                            EmployeeTypeId = 2,
                            BaseCost = 3,
                            LuxuryCost = 1,
                            Type = "Bailiff"
                        },
                        new
                        {
                            EmployeeTypeId = 3,
                            BaseCost = 4,
                            LuxuryCost = 1,
                            Type = "Herald"
                        },
                        new
                        {
                            EmployeeTypeId = 4,
                            BaseCost = 2,
                            LuxuryCost = 0,
                            Type = "Hunter"
                        },
                        new
                        {
                            EmployeeTypeId = 5,
                            BaseCost = 3,
                            LuxuryCost = 3,
                            Type = "Physician"
                        },
                        new
                        {
                            EmployeeTypeId = 6,
                            BaseCost = 3,
                            LuxuryCost = 1,
                            Type = "Scholar"
                        },
                        new
                        {
                            EmployeeTypeId = 7,
                            BaseCost = 2,
                            LuxuryCost = 1,
                            Type = "Cupbearer"
                        },
                        new
                        {
                            EmployeeTypeId = 8,
                            BaseCost = 2,
                            LuxuryCost = -1,
                            Type = "Prospector"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Types.InheritanceType", b =>
                {
                    b.Property<int>("InheritanceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("InheritanceTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InheritanceTypeId");

                    b.ToTable("InheritanceTypes");

                    b.HasData(
                        new
                        {
                            InheritanceTypeId = 1,
                            Description = "Kallas även län på ed. Vasallen får sin förläning mot att han utför eller utfört länsherren en tjänst, exempelvis vapentjänst. Länet är ärftligt, det vill säga går vidare till vasallens son vid vasallens frånfall.",
                            Type = "Län på tjänst, ärftligt"
                        },
                        new
                        {
                            InheritanceTypeId = 2,
                            Description = "Kallas även län på ed. Vasallen får sin förläning mot att han utför eller utfört länsherren en tjänst, exempelvis vapentjänst. Länet är inte ärftligt utan går tillbaka till länsherren då vasallen dör.",
                            Type = "Län på tjänst, icke ärftligt"
                        },
                        new
                        {
                            InheritanceTypeId = 3,
                            Description = "Vasallen betalar en fast avgift till sin länsherre mot att han fritt får disponera länets inkomster.",
                            Type = "Län på avgift"
                        },
                        new
                        {
                            InheritanceTypeId = 4,
                            Description = "Ibland händer det att en länsherre måste låna pengar, till exempel i tider av ofred. Länsherren kan då skänka långivaren ett län att disponera fritt tills dess att lånet är återbetlat.",
                            Type = "Pantlän"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Types.LivingconditionType", b =>
                {
                    b.Property<int>("LivingconditionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LivingconditionTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseCost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FocusGain")
                        .HasColumnType("int");

                    b.Property<int>("LuxuryCost")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LivingconditionTypeId");

                    b.ToTable("LivingconditionTypes");

                    b.HasData(
                        new
                        {
                            LivingconditionTypeId = 1,
                            BaseCost = 2,
                            Description = "Denna levnadsstandard innebär två usla mål mat om dagen, utspätt öl att dricka och ofta små marginaler från svält och sjukdom. Det finns inga tjänare i hushållet. Möblemanget är gammalt och lagat. Så här lever de flesta ofria bondefamiljer, och det är således långt under en länsherres värdighet.",
                            FocusGain = -4,
                            LuxuryCost = 0,
                            Type = "Nödtorftig"
                        },
                        new
                        {
                            LivingconditionTypeId = 2,
                            BaseCost = 3,
                            Description = "Denna levnadsstandard innebär två mål mat om dagen, öl eller billigt vin att dricka och någon enstaka utsvävning med fest eller gamman. Det finns inga tjänare i hushållet, förutom en kokerska. Möblemanget är robust, men inte särskilt vackert. Så här lever de flesta borgarfamiljer, och det är således under en länsherres värdighet.",
                            FocusGain = 0,
                            LuxuryCost = 1,
                            Type = "Gemen"
                        },
                        new
                        {
                            LivingconditionTypeId = 3,
                            BaseCost = 5,
                            Description = "Denna levnadsstandard innebär två rediga mål mat om dagen, varav ett är en mindre bankett med ett flertal rätter. Öl eller vin serveras vid samtliga måltider, och länsherren är god för åtminstone månatliga utsvävningar med fest och gamman. Det finns en handfull tjänare i hushållet och ett flertal kokerskor och kökspigor. Möblemanget är veckert. Så här lever rika borgarfamiljer och måttfulla länsherrar.",
                            FocusGain = 4,
                            LuxuryCost = 2,
                            Type = "God"
                        },
                        new
                        {
                            LivingconditionTypeId = 4,
                            BaseCost = 7,
                            Description = "Denna levnadsstandard innebär tre eller fler ypperliga mål mat om dagen, varav två är banketter med ett dussintal rätter. Obegränsade mängder synnerligen fint öl och välsmakande vin serveras vid samtliga måltider, och länsherren är god för utsvävningar med fest och gamman närhelst han så önskar. Det finns massvis av tjänare i hushållet, en eller flera kammarherrar och ett hov av damer och kavaljerer. Möblemanget är exklusivt. Så här lever endast de rikaste i samhället - kungen, de rikaste adelsmännen och ett exklusivt fåtal av handelsfurstar.",
                            FocusGain = 8,
                            LuxuryCost = 4,
                            Type = "Lyxliv"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Types.MineType", b =>
                {
                    b.Property<int>("MineTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MineTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Crime")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IronProduction")
                        .HasColumnType("int");

                    b.Property<int>("LuxuryProduction")
                        .HasColumnType("int");

                    b.Property<int>("PopulationModifier")
                        .HasColumnType("int");

                    b.Property<int>("SilverProduction")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MineTypeId");

                    b.ToTable("MineType");

                    b.HasData(
                        new
                        {
                            MineTypeId = 1,
                            Crime = 24,
                            DisplayName = "Tenn",
                            IronProduction = 0,
                            LuxuryProduction = 0,
                            PopulationModifier = 72,
                            SilverProduction = 24000,
                            Type = "Tin"
                        },
                        new
                        {
                            MineTypeId = 2,
                            Crime = 40,
                            DisplayName = "Järn",
                            IronProduction = 800,
                            LuxuryProduction = 0,
                            PopulationModifier = 120,
                            SilverProduction = 0,
                            Type = "Iron"
                        },
                        new
                        {
                            MineTypeId = 3,
                            Crime = 120,
                            DisplayName = "Koppar",
                            IronProduction = 0,
                            LuxuryProduction = 10,
                            PopulationModifier = 360,
                            SilverProduction = 112800,
                            Type = "Copper"
                        },
                        new
                        {
                            MineTypeId = 4,
                            Crime = 200,
                            DisplayName = "Silver",
                            IronProduction = 0,
                            LuxuryProduction = 50,
                            PopulationModifier = 600,
                            SilverProduction = 164000,
                            Type = "Silver"
                        },
                        new
                        {
                            MineTypeId = 5,
                            Crime = 300,
                            DisplayName = "Guld",
                            IronProduction = 0,
                            LuxuryProduction = 100,
                            PopulationModifier = 900,
                            SilverProduction = 228000,
                            Type = "Gold"
                        },
                        new
                        {
                            MineTypeId = 6,
                            Crime = 400,
                            DisplayName = "Ädelstenar",
                            IronProduction = 0,
                            LuxuryProduction = 200,
                            PopulationModifier = 1200,
                            SilverProduction = 256000,
                            Type = "Gemstones"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Types.QuarryType", b =>
                {
                    b.Property<int>("QuarryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("QuarryTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Crime")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PopulationModifier")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuarryTypeId");

                    b.ToTable("QuarryType");

                    b.HasData(
                        new
                        {
                            QuarryTypeId = 1,
                            Crime = 6,
                            DisplayName = "Litet",
                            PopulationModifier = 24,
                            Type = "Small"
                        },
                        new
                        {
                            QuarryTypeId = 2,
                            Crime = 18,
                            DisplayName = "",
                            PopulationModifier = 72,
                            Type = "Medium"
                        },
                        new
                        {
                            QuarryTypeId = 3,
                            Crime = 54,
                            DisplayName = "Stort",
                            PopulationModifier = 162,
                            Type = "Large"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Types.RoadType", b =>
                {
                    b.Property<int>("RoadTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoadTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ModificationFactor")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpgradeBaseCost")
                        .HasColumnType("int");

                    b.Property<int>("UpgradeStoneCost")
                        .HasColumnType("int");

                    b.HasKey("RoadTypeId");

                    b.ToTable("RoadTypes");

                    b.HasData(
                        new
                        {
                            RoadTypeId = 1,
                            ModificationFactor = 0.40000000000000002,
                            Type = "Stigar",
                            UpgradeBaseCost = 20,
                            UpgradeStoneCost = 0
                        },
                        new
                        {
                            RoadTypeId = 2,
                            ModificationFactor = 1.0,
                            Type = "Väg",
                            UpgradeBaseCost = 64,
                            UpgradeStoneCost = 15000
                        },
                        new
                        {
                            RoadTypeId = 3,
                            ModificationFactor = 2.7999999999999998,
                            Type = "Stenlagdväg",
                            UpgradeBaseCost = 128,
                            UpgradeStoneCost = 30000
                        },
                        new
                        {
                            RoadTypeId = 4,
                            ModificationFactor = 8.4000000000000004,
                            Type = "Kunglig landsväg",
                            UpgradeBaseCost = -1,
                            UpgradeStoneCost = -1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Types.SoldierType", b =>
                {
                    b.Property<int>("SoldierTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SoldierTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accommodation")
                        .HasColumnType("bit");

                    b.Property<int>("BaseCost")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SilverCost")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SoldierTypeId");

                    b.ToTable("SoldierType");

                    b.HasData(
                        new
                        {
                            SoldierTypeId = 1,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Armborstskyttar",
                            SilverCost = 320,
                            Type = "Crossbowmen"
                        },
                        new
                        {
                            SoldierTypeId = 2,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Bågskyttar",
                            SilverCost = 160,
                            Type = "Bowmen"
                        },
                        new
                        {
                            SoldierTypeId = 3,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Fältskär",
                            SilverCost = 2920,
                            Type = "Medics"
                        },
                        new
                        {
                            SoldierTypeId = 4,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Skicklig fältskär",
                            SilverCost = 4480,
                            Type = "MedicsSkilled"
                        },
                        new
                        {
                            SoldierTypeId = 5,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Lätt infanteri",
                            SilverCost = 320,
                            Type = "InfantryLight"
                        },
                        new
                        {
                            SoldierTypeId = 6,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Infanteri",
                            SilverCost = 480,
                            Type = "Infantry"
                        },
                        new
                        {
                            SoldierTypeId = 7,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Tungt infanteri",
                            SilverCost = 800,
                            Type = "InfantryHeavy"
                        },
                        new
                        {
                            SoldierTypeId = 8,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Elit infanteri",
                            SilverCost = 1360,
                            Type = "InfantryElite"
                        },
                        new
                        {
                            SoldierTypeId = 9,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Långbågsskyttar",
                            SilverCost = 320,
                            Type = "Longbowmen"
                        },
                        new
                        {
                            SoldierTypeId = 10,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Legoknektar",
                            SilverCost = 560,
                            Type = "Mercenary"
                        },
                        new
                        {
                            SoldierTypeId = 11,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Bågskyttar, legoknektar",
                            SilverCost = 480,
                            Type = "MercenaryBowmen"
                        },
                        new
                        {
                            SoldierTypeId = 12,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Elit legoknektar",
                            SilverCost = 1840,
                            Type = "MercenaryElite"
                        },
                        new
                        {
                            SoldierTypeId = 13,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Maskinister",
                            SilverCost = 1360,
                            Type = "Engineers"
                        },
                        new
                        {
                            SoldierTypeId = 14,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Spjutmän",
                            SilverCost = 320,
                            Type = "Spearmen"
                        },
                        new
                        {
                            SoldierTypeId = 15,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Spejare",
                            SilverCost = 320,
                            Type = "Scouts"
                        },
                        new
                        {
                            SoldierTypeId = 16,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Skickliga spejare",
                            SilverCost = 480,
                            Type = "SkilledScouts"
                        },
                        new
                        {
                            SoldierTypeId = 17,
                            Accommodation = true,
                            BaseCost = 2,
                            DisplayName = "Tempelriddare",
                            SilverCost = 2360,
                            Type = "KnightTemplars"
                        },
                        new
                        {
                            SoldierTypeId = 18,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Vakter",
                            SilverCost = 320,
                            Type = "Guards"
                        },
                        new
                        {
                            SoldierTypeId = 19,
                            Accommodation = false,
                            BaseCost = 2,
                            DisplayName = "Vapenmästare",
                            SilverCost = 2400,
                            Type = "Weaponmasters"
                        },
                        new
                        {
                            SoldierTypeId = 20,
                            Accommodation = false,
                            BaseCost = 6,
                            DisplayName = "Kavalleri, bågskyttar",
                            SilverCost = 320,
                            Type = "CavalryBowmen"
                        },
                        new
                        {
                            SoldierTypeId = 21,
                            Accommodation = false,
                            BaseCost = 4,
                            DisplayName = "Kurirryttare",
                            SilverCost = 320,
                            Type = "CavalryCourier"
                        },
                        new
                        {
                            SoldierTypeId = 22,
                            Accommodation = false,
                            BaseCost = 6,
                            DisplayName = "Lätt kavalleri",
                            SilverCost = 320,
                            Type = "CavalryLight"
                        },
                        new
                        {
                            SoldierTypeId = 23,
                            Accommodation = true,
                            BaseCost = 4,
                            DisplayName = "Riddare",
                            SilverCost = 3260,
                            Type = "CavalryKnights"
                        },
                        new
                        {
                            SoldierTypeId = 24,
                            Accommodation = false,
                            BaseCost = 6,
                            DisplayName = "Kavalleri spejare",
                            SilverCost = 480,
                            Type = "CavalryScouts"
                        },
                        new
                        {
                            SoldierTypeId = 25,
                            Accommodation = true,
                            BaseCost = 4,
                            DisplayName = "Kavalleri, tempelriddare",
                            SilverCost = 2360,
                            Type = "CavalryKnightTemplars"
                        },
                        new
                        {
                            SoldierTypeId = 26,
                            Accommodation = false,
                            BaseCost = 6,
                            DisplayName = "Tungt kavalleri",
                            SilverCost = 1660,
                            Type = "CavalryHeavy"
                        },
                        new
                        {
                            SoldierTypeId = 27,
                            Accommodation = false,
                            BaseCost = 6,
                            DisplayName = "Elit kavalleri",
                            SilverCost = 2040,
                            Type = "CavalryElite"
                        },
                        new
                        {
                            SoldierTypeId = 28,
                            Accommodation = true,
                            BaseCost = 0,
                            DisplayName = "Korporal",
                            SilverCost = 2340,
                            Type = "OfficerCorporal"
                        },
                        new
                        {
                            SoldierTypeId = 29,
                            Accommodation = true,
                            BaseCost = 0,
                            DisplayName = "Sergeant",
                            SilverCost = 3120,
                            Type = "OfficerSergeant"
                        },
                        new
                        {
                            SoldierTypeId = 30,
                            Accommodation = true,
                            BaseCost = 0,
                            DisplayName = "Kapten",
                            SilverCost = 4680,
                            Type = "OfficerCaptain"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Types.SubsidiaryType", b =>
                {
                    b.Property<int>("SubsidiaryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SubsidiaryTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DaysworkBuild")
                        .HasColumnType("int");

                    b.Property<int>("DaysworkUpkeep")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FallModification")
                        .HasColumnType("float");

                    b.Property<double>("IncomeFactor")
                        .HasColumnType("float");

                    b.Property<double>("IncomeInBase")
                        .HasColumnType("float");

                    b.Property<double>("IncomeInLuxury")
                        .HasColumnType("float");

                    b.Property<double>("IncomeInSilver")
                        .HasColumnType("float");

                    b.Property<double>("SpringModification")
                        .HasColumnType("float");

                    b.Property<double>("SummerModification")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("WinterModification")
                        .HasColumnType("float");

                    b.HasKey("SubsidiaryTypeId");

                    b.ToTable("SubsidiaryType");

                    b.HasData(
                        new
                        {
                            SubsidiaryTypeId = 1,
                            DaysworkBuild = 730,
                            DaysworkUpkeep = 365,
                            DisplayName = "Biodling",
                            FallModification = 0.10000000000000001,
                            IncomeFactor = 15.0,
                            IncomeInBase = 0.34999999999999998,
                            IncomeInLuxury = 0.25,
                            IncomeInSilver = 0.40000000000000002,
                            SpringModification = 0.34999999999999998,
                            SummerModification = 0.5,
                            Type = "Beekeeping",
                            WinterModification = 0.050000000000000003
                        },
                        new
                        {
                            SubsidiaryTypeId = 2,
                            DaysworkBuild = 1095,
                            DaysworkUpkeep = 365,
                            DisplayName = "Fiskdammar",
                            FallModification = 0.25,
                            IncomeFactor = 0.20000000000000001,
                            IncomeInBase = 1.0,
                            IncomeInLuxury = 0.0,
                            IncomeInSilver = 0.0,
                            SpringModification = 0.34999999999999998,
                            SummerModification = 0.34999999999999998,
                            Type = "Fishfarms",
                            WinterModification = 0.050000000000000003
                        },
                        new
                        {
                            SubsidiaryTypeId = 3,
                            DaysworkBuild = 4225,
                            DaysworkUpkeep = 365,
                            DisplayName = "Glasbruk",
                            FallModification = 0.0,
                            IncomeFactor = 0.20000000000000001,
                            IncomeInBase = 0.0,
                            IncomeInLuxury = 1.0,
                            IncomeInSilver = 0.0,
                            SpringModification = 0.0,
                            SummerModification = 0.0,
                            Type = "Glassworks",
                            WinterModification = 0.0
                        },
                        new
                        {
                            SubsidiaryTypeId = 4,
                            DaysworkBuild = 5320,
                            DaysworkUpkeep = 1460,
                            DisplayName = "Olivlundar",
                            FallModification = 0.25,
                            IncomeFactor = 20.0,
                            IncomeInBase = 0.59999999999999998,
                            IncomeInLuxury = 0.20000000000000001,
                            IncomeInSilver = 0.20000000000000001,
                            SpringModification = 0.25,
                            SummerModification = 0.34999999999999998,
                            Type = "Olivegrove",
                            WinterModification = 0.14999999999999999
                        },
                        new
                        {
                            SubsidiaryTypeId = 5,
                            DaysworkBuild = 5320,
                            DaysworkUpkeep = 2920,
                            DisplayName = "Vindistrikt",
                            FallModification = 0.25,
                            IncomeFactor = 20.0,
                            IncomeInBase = 0.25,
                            IncomeInLuxury = 0.40000000000000002,
                            IncomeInSilver = 0.34999999999999998,
                            SpringModification = 0.25,
                            SummerModification = 0.29999999999999999,
                            Type = "Wineregion",
                            WinterModification = 0.20000000000000001
                        },
                        new
                        {
                            SubsidiaryTypeId = 6,
                            DaysworkBuild = 3285,
                            DaysworkUpkeep = 730,
                            DisplayName = "Äppellundar",
                            FallModification = 0.29999999999999999,
                            IncomeFactor = 20.0,
                            IncomeInBase = 1.0,
                            IncomeInLuxury = 0.0,
                            IncomeInSilver = 0.0,
                            SpringModification = 0.29999999999999999,
                            SummerModification = 0.29999999999999999,
                            Type = "Applegrove",
                            WinterModification = 0.10000000000000001
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserLink", b =>
                {
                    b.Property<Guid>("UserLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserLinkId");

                    b.ToTable("UserLinks");
                });

            modelBuilder.Entity("Domain.Entities.Village", b =>
                {
                    b.Property<Guid>("VillageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Blacksmiths")
                        .HasColumnType("int");

                    b.Property<int>("Boatbuilders")
                        .HasColumnType("int");

                    b.Property<int>("Burgess")
                        .HasColumnType("int");

                    b.Property<int>("Carpenters")
                        .HasColumnType("int");

                    b.Property<int>("Farmers")
                        .HasColumnType("int");

                    b.Property<Guid?>("FiefId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Furriers")
                        .HasColumnType("int");

                    b.Property<int>("Innkeepers")
                        .HasColumnType("int");

                    b.Property<int>("Millers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Serfdoms")
                        .HasColumnType("int");

                    b.Property<int>("Tailors")
                        .HasColumnType("int");

                    b.Property<int>("Tanners")
                        .HasColumnType("int");

                    b.HasKey("VillageId");

                    b.HasIndex("FiefId");

                    b.ToTable("Villages");
                });

            modelBuilder.Entity("Domain.Entities.Industries.Felling", b =>
                {
                    b.HasBaseType("Domain.Entities.Industries.Industry");

                    b.Property<int>("AmountClearUseless")
                        .HasColumnType("int");

                    b.Property<int>("AmountFelling")
                        .HasColumnType("int");

                    b.Property<int>("AmountLandclearing")
                        .HasColumnType("int");

                    b.Property<int>("AmountLandclearingOfFelling")
                        .HasColumnType("int");

                    b.Property<Guid?>("DevelopmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBeingDeveloped")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("Felling");
                });

            modelBuilder.Entity("Domain.Entities.Industries.Mine", b =>
                {
                    b.HasBaseType("Domain.Entities.Industries.Industry");

                    b.Property<Guid?>("DevelopmentId")
                        .HasColumnName("Mine_DevelopmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("FirstYear")
                        .HasColumnType("bit");

                    b.Property<int>("Guards")
                        .HasColumnType("int");

                    b.Property<int>("Iron")
                        .HasColumnType("int");

                    b.Property<bool>("IsBeingDeveloped")
                        .HasColumnName("Mine_IsBeingDeveloped")
                        .HasColumnType("bit");

                    b.Property<int>("Luxury")
                        .HasColumnType("int");

                    b.Property<int>("MineTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Silver")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsLeft")
                        .HasColumnType("int");

                    b.HasIndex("MineTypeId");

                    b.HasDiscriminator().HasValue("Mine");
                });

            modelBuilder.Entity("Domain.Entities.Industries.Quarry", b =>
                {
                    b.HasBaseType("Domain.Entities.Industries.Industry");

                    b.Property<Guid?>("DevelopmentId")
                        .HasColumnName("Quarry_DevelopmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Guards")
                        .HasColumnName("Quarry_Guards")
                        .HasColumnType("int");

                    b.Property<bool>("IsBeingDeveloped")
                        .HasColumnName("Quarry_IsBeingDeveloped")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstYear")
                        .HasColumnType("bit");

                    b.Property<int>("QuarryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Stone")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnName("Quarry_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsLeft")
                        .HasColumnName("Quarry_YearsLeft")
                        .HasColumnType("int");

                    b.HasIndex("QuarryTypeId");

                    b.HasDiscriminator().HasValue("Quarry");
                });

            modelBuilder.Entity("Domain.Entities.Industries.Subsidiary", b =>
                {
                    b.HasBaseType("Domain.Entities.Industries.Industry");

                    b.Property<int>("Base")
                        .HasColumnType("int");

                    b.Property<int>("DaysworkThisYear")
                        .HasColumnType("int");

                    b.Property<Guid?>("DevelopmentId")
                        .HasColumnName("Subsidiary_DevelopmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DevelopmentLevel")
                        .HasColumnType("int");

                    b.Property<double>("FallModifier")
                        .HasColumnType("float");

                    b.Property<bool>("IsBeingDeveloped")
                        .HasColumnName("Subsidiary_IsBeingDeveloped")
                        .HasColumnType("bit");

                    b.Property<int>("Luxury")
                        .HasColumnName("Subsidiary_Luxury")
                        .HasColumnType("int");

                    b.Property<int>("Quality")
                        .HasColumnType("int");

                    b.Property<int>("Silver")
                        .HasColumnName("Subsidiary_Silver")
                        .HasColumnType("int");

                    b.Property<double>("SpringModifier")
                        .HasColumnType("float");

                    b.Property<int>("SubsidiaryTypeId")
                        .HasColumnType("int");

                    b.Property<double>("SummerModifier")
                        .HasColumnType("float");

                    b.Property<double>("WinterModifier")
                        .HasColumnType("float");

                    b.HasIndex("SubsidiaryTypeId");

                    b.HasDiscriminator().HasValue("Subsidiary");
                });

            modelBuilder.Entity("Domain.Entities.Boat", b =>
                {
                    b.HasOne("Domain.Entities.Types.BoatType", "BoatType")
                        .WithMany("Boats")
                        .HasForeignKey("BoatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Persons.Boatbuilder", "Boatbuilder")
                        .WithMany()
                        .HasForeignKey("BoatbuilderId");

                    b.HasOne("Domain.Entities.Cargo", "Cargo")
                        .WithMany("Boats")
                        .HasForeignKey("CargoId");

                    b.HasOne("Domain.Entities.Fief", "Fief")
                        .WithMany("Boats")
                        .HasForeignKey("FiefId");

                    b.HasOne("Domain.Entities.Port", null)
                        .WithMany("Boats")
                        .HasForeignKey("PortId");

                    b.HasOne("Domain.Entities.Shipyard", "Shipyard")
                        .WithMany("Boats")
                        .HasForeignKey("ShipyardId");
                });

            modelBuilder.Entity("Domain.Entities.Building", b =>
                {
                    b.HasOne("Domain.Entities.Persons.Builder", "Builder")
                        .WithMany()
                        .HasForeignKey("BuilderId");

                    b.HasOne("Domain.Entities.Types.BuildingType", "BuildingType")
                        .WithMany("Buildings")
                        .HasForeignKey("BuildingTypeId");

                    b.HasOne("Domain.Entities.Fief", "Fief")
                        .WithMany("Buildings")
                        .HasForeignKey("FiefId");
                });

            modelBuilder.Entity("Domain.Entities.Development", b =>
                {
                    b.HasOne("Domain.Entities.Assignment", "Assignment")
                        .WithOne("Development")
                        .HasForeignKey("Domain.Entities.Development", "AssignmentId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Domain.Entities.Fief", b =>
                {
                    b.HasOne("Domain.Entities.Assignment", "Assignment")
                        .WithOne("Fief")
                        .HasForeignKey("Domain.Entities.Fief", "AssignmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.GameSession", "GameSession")
                        .WithMany("Fiefs")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Inheritance", "Inheritance")
                        .WithOne("Fief")
                        .HasForeignKey("Domain.Entities.Fief", "InheritanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Types.InheritanceType", null)
                        .WithMany("Fiefs")
                        .HasForeignKey("InheritanceTypeId");

                    b.HasOne("Domain.Entities.Livingcondition", "Livingcondition")
                        .WithOne("Fief")
                        .HasForeignKey("Domain.Entities.Fief", "LivingconditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Market", "Market")
                        .WithOne("Fief")
                        .HasForeignKey("Domain.Entities.Fief", "MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Port", "Port")
                        .WithOne("Fief")
                        .HasForeignKey("Domain.Entities.Fief", "PortId");

                    b.HasOne("Domain.Entities.Road", "Road")
                        .WithOne("Fief")
                        .HasForeignKey("Domain.Entities.Fief", "RoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.GameSession", b =>
                {
                    b.HasOne("Domain.Entities.UserLink", "UserLink")
                        .WithMany("GameSessions")
                        .HasForeignKey("UserLinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Industries.Industry", b =>
                {
                    b.HasOne("Domain.Entities.Assignment", "Assignment")
                        .WithOne("Industry")
                        .HasForeignKey("Domain.Entities.Industries.Industry", "AssignmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Fief", "Fief")
                        .WithMany("Industries")
                        .HasForeignKey("FiefId");
                });

            modelBuilder.Entity("Domain.Entities.Inheritance", b =>
                {
                    b.HasOne("Domain.Entities.Types.InheritanceType", "InheritanceType")
                        .WithMany()
                        .HasForeignKey("InheritanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Livingcondition", b =>
                {
                    b.HasOne("Domain.Entities.Types.LivingconditionType", "LivingconditionType")
                        .WithMany("Livingconditions")
                        .HasForeignKey("LivingconditionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Market", b =>
                {
                    b.HasOne("Domain.Entities.Assignment", "Assignment")
                        .WithOne("Market")
                        .HasForeignKey("Domain.Entities.Market", "AssignmentId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Domain.Entities.Persons.Boatbuilder", b =>
                {
                    b.HasOne("Domain.Entities.Shipyard", "Shipyard")
                        .WithMany("Boatbuilders")
                        .HasForeignKey("ShipyardId");
                });

            modelBuilder.Entity("Domain.Entities.Persons.Builder", b =>
                {
                    b.HasOne("Domain.Entities.Fief", "Fief")
                        .WithMany("Builders")
                        .HasForeignKey("FiefId");
                });

            modelBuilder.Entity("Domain.Entities.Persons.Employee", b =>
                {
                    b.HasOne("Domain.Entities.Types.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId");

                    b.HasOne("Domain.Entities.Fief", "Fief")
                        .WithMany("Employees")
                        .HasForeignKey("FiefId");
                });

            modelBuilder.Entity("Domain.Entities.Persons.Merchant", b =>
                {
                    b.HasOne("Domain.Entities.Cargo", "Cargo")
                        .WithMany("Merchants")
                        .HasForeignKey("CargoId");

                    b.HasOne("Domain.Entities.Market", null)
                        .WithMany("Merchants")
                        .HasForeignKey("MarketId");

                    b.HasOne("Domain.Entities.Port", "Port")
                        .WithMany("Merchants")
                        .HasForeignKey("PortId");
                });

            modelBuilder.Entity("Domain.Entities.Persons.Resident", b =>
                {
                    b.HasOne("Domain.Entities.Fief", "Fief")
                        .WithMany("Residents")
                        .HasForeignKey("FiefId");
                });

            modelBuilder.Entity("Domain.Entities.Persons.Soldier", b =>
                {
                    b.HasOne("Domain.Entities.Boat", "Boat")
                        .WithMany("Soldiers")
                        .HasForeignKey("BoatId");

                    b.HasOne("Domain.Entities.Fief", "Fief")
                        .WithMany("Soldiers")
                        .HasForeignKey("FiefId");

                    b.HasOne("Domain.Entities.Market", "Market")
                        .WithMany("Soldiers")
                        .HasForeignKey("MarketId");

                    b.HasOne("Domain.Entities.Persons.Merchant", "Merchant")
                        .WithMany("Soldiers")
                        .HasForeignKey("MerchantId");

                    b.HasOne("Domain.Entities.Industries.Mine", "Mine")
                        .WithMany("Soldiers")
                        .HasForeignKey("MineIndustryId");

                    b.HasOne("Domain.Entities.Port", "Port")
                        .WithMany("Soldiers")
                        .HasForeignKey("PortId");

                    b.HasOne("Domain.Entities.Industries.Quarry", "Quarry")
                        .WithMany("Soldiers")
                        .HasForeignKey("QuarryIndustryId");

                    b.HasOne("Domain.Entities.Road", "Road")
                        .WithMany("Soldiers")
                        .HasForeignKey("RoadId");

                    b.HasOne("Domain.Entities.Types.SoldierType", "SoldierType")
                        .WithMany("Soldiers")
                        .HasForeignKey("SoldierTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Persons.Steward", b =>
                {
                    b.HasOne("Domain.Entities.Assignment", "Assignment")
                        .WithOne("Steward")
                        .HasForeignKey("Domain.Entities.Persons.Steward", "AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Fief", "Fief")
                        .WithMany()
                        .HasForeignKey("FiefId");

                    b.HasOne("Domain.Entities.GameSession", null)
                        .WithMany("Stewards")
                        .HasForeignKey("GameSessionId");
                });

            modelBuilder.Entity("Domain.Entities.Port", b =>
                {
                    b.HasOne("Domain.Entities.Assignment", "Assignment")
                        .WithOne("Port")
                        .HasForeignKey("Domain.Entities.Port", "AssignmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.Shipyard", "Shipyard")
                        .WithOne("Port")
                        .HasForeignKey("Domain.Entities.Port", "ShipyardId");
                });

            modelBuilder.Entity("Domain.Entities.Road", b =>
                {
                    b.HasOne("Domain.Entities.Types.RoadType", "RoadType")
                        .WithMany("Roads")
                        .HasForeignKey("RoadTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Shipyard", b =>
                {
                    b.HasOne("Domain.Entities.Assignment", "Assignment")
                        .WithOne("Shipyard")
                        .HasForeignKey("Domain.Entities.Shipyard", "AssignmentId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Domain.Entities.Village", b =>
                {
                    b.HasOne("Domain.Entities.Fief", "Fief")
                        .WithMany("Villages")
                        .HasForeignKey("FiefId");
                });

            modelBuilder.Entity("Domain.Entities.Industries.Mine", b =>
                {
                    b.HasOne("Domain.Entities.Types.MineType", "MineType")
                        .WithMany("Mines")
                        .HasForeignKey("MineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Industries.Quarry", b =>
                {
                    b.HasOne("Domain.Entities.Types.QuarryType", "QuarryType")
                        .WithMany("Quarries")
                        .HasForeignKey("QuarryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Industries.Subsidiary", b =>
                {
                    b.HasOne("Domain.Entities.Types.SubsidiaryType", "SubsidiaryType")
                        .WithMany("Subsidiaries")
                        .HasForeignKey("SubsidiaryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
